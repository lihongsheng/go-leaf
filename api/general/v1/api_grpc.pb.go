// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: general/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	General_General_FullMethodName = "/api.general.v1.General/General"
	General_Parse_FullMethodName   = "/api.general.v1.General/Parse"
)

// GeneralClient is the client API for General service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralClient interface {
	General(ctx context.Context, in *GeneralReq, opts ...grpc.CallOption) (*GeneralResp, error)
	Parse(ctx context.Context, in *ParseReq, opts ...grpc.CallOption) (*ParseResp, error)
}

type generalClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralClient(cc grpc.ClientConnInterface) GeneralClient {
	return &generalClient{cc}
}

func (c *generalClient) General(ctx context.Context, in *GeneralReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, General_General_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalClient) Parse(ctx context.Context, in *ParseReq, opts ...grpc.CallOption) (*ParseResp, error) {
	out := new(ParseResp)
	err := c.cc.Invoke(ctx, General_Parse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralServer is the server API for General service.
// All implementations must embed UnimplementedGeneralServer
// for forward compatibility
type GeneralServer interface {
	General(context.Context, *GeneralReq) (*GeneralResp, error)
	Parse(context.Context, *ParseReq) (*ParseResp, error)
	mustEmbedUnimplementedGeneralServer()
}

// UnimplementedGeneralServer must be embedded to have forward compatible implementations.
type UnimplementedGeneralServer struct {
}

func (UnimplementedGeneralServer) General(context.Context, *GeneralReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method General not implemented")
}
func (UnimplementedGeneralServer) Parse(context.Context, *ParseReq) (*ParseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedGeneralServer) mustEmbedUnimplementedGeneralServer() {}

// UnsafeGeneralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralServer will
// result in compilation errors.
type UnsafeGeneralServer interface {
	mustEmbedUnimplementedGeneralServer()
}

func RegisterGeneralServer(s grpc.ServiceRegistrar, srv GeneralServer) {
	s.RegisterService(&General_ServiceDesc, srv)
}

func _General_General_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServer).General(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: General_General_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServer).General(ctx, req.(*GeneralReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _General_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: General_Parse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServer).Parse(ctx, req.(*ParseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// General_ServiceDesc is the grpc.ServiceDesc for General service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var General_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.general.v1.General",
	HandlerType: (*GeneralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "General",
			Handler:    _General_General_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _General_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general/v1/api.proto",
}
