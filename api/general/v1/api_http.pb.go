// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.12
// source: general/v1/api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppGeneral = "/api.general.v1.App/General"
const OperationAppParse = "/api.general.v1.App/Parse"

type AppHTTPServer interface {
	General(context.Context, *GeneralReq) (*GeneralResp, error)
	Parse(context.Context, *ParseReq) (*ParseResp, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/general", _App_General0_HTTP_Handler(srv))
	r.GET("/v1/parse", _App_Parse0_HTTP_Handler(srv))
}

func _App_General0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GeneralReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGeneral)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.General(ctx, req.(*GeneralReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GeneralResp)
		return ctx.Result(200, reply)
	}
}

func _App_Parse0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ParseReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppParse)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Parse(ctx, req.(*ParseReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ParseResp)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	General(ctx context.Context, req *GeneralReq, opts ...http.CallOption) (rsp *GeneralResp, err error)
	Parse(ctx context.Context, req *ParseReq, opts ...http.CallOption) (rsp *ParseResp, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) General(ctx context.Context, in *GeneralReq, opts ...http.CallOption) (*GeneralResp, error) {
	var out GeneralResp
	pattern := "/v1/general"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppGeneral))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) Parse(ctx context.Context, in *ParseReq, opts ...http.CallOption) (*ParseResp, error) {
	var out ParseResp
	pattern := "/v1/parse"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppParse))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
