// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: general/v1/api.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GeneralReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GeneralReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeneralReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GeneralReqMultiError, or
// nil if none found.
func (m *GeneralReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GeneralReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GeneralReqMultiError(errors)
	}

	return nil
}

// GeneralReqMultiError is an error wrapping multiple validation errors
// returned by GeneralReq.ValidateAll() if the designated constraints aren't met.
type GeneralReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeneralReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeneralReqMultiError) AllErrors() []error { return m }

// GeneralReqValidationError is the validation error returned by
// GeneralReq.Validate if the designated constraints aren't met.
type GeneralReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeneralReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeneralReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeneralReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeneralReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeneralReqValidationError) ErrorName() string { return "GeneralReqValidationError" }

// Error satisfies the builtin error interface
func (e GeneralReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneralReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeneralReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeneralReqValidationError{}

// Validate checks the field values on ParseReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseReqMultiError, or nil
// if none found.
func (m *ParseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGeneralId() < 1 {
		err := ParseReqValidationError{
			field:  "GeneralId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParseReqMultiError(errors)
	}

	return nil
}

// ParseReqMultiError is an error wrapping multiple validation errors returned
// by ParseReq.ValidateAll() if the designated constraints aren't met.
type ParseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseReqMultiError) AllErrors() []error { return m }

// ParseReqValidationError is the validation error returned by
// ParseReq.Validate if the designated constraints aren't met.
type ParseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseReqValidationError) ErrorName() string { return "ParseReqValidationError" }

// Error satisfies the builtin error interface
func (e ParseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseReqValidationError{}

// Validate checks the field values on ParseResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseRespMultiError, or nil
// if none found.
func (m *ParseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParseRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParseRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParseRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParseRespMultiError(errors)
	}

	return nil
}

// ParseRespMultiError is an error wrapping multiple validation errors returned
// by ParseResp.ValidateAll() if the designated constraints aren't met.
type ParseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseRespMultiError) AllErrors() []error { return m }

// ParseRespValidationError is the validation error returned by
// ParseResp.Validate if the designated constraints aren't met.
type ParseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseRespValidationError) ErrorName() string { return "ParseRespValidationError" }

// Error satisfies the builtin error interface
func (e ParseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseRespValidationError{}

// Validate checks the field values on GeneralResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GeneralResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeneralResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GeneralRespMultiError, or
// nil if none found.
func (m *GeneralResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GeneralResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GeneralRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GeneralRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeneralRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GeneralRespMultiError(errors)
	}

	return nil
}

// GeneralRespMultiError is an error wrapping multiple validation errors
// returned by GeneralResp.ValidateAll() if the designated constraints aren't met.
type GeneralRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeneralRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeneralRespMultiError) AllErrors() []error { return m }

// GeneralRespValidationError is the validation error returned by
// GeneralResp.Validate if the designated constraints aren't met.
type GeneralRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeneralRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeneralRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeneralRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeneralRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeneralRespValidationError) ErrorName() string { return "GeneralRespValidationError" }

// Error satisfies the builtin error interface
func (e GeneralRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneralResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeneralRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeneralRespValidationError{}

// Validate checks the field values on InfoData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoDataMultiError, or nil
// if none found.
func (m *InfoData) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GeneralId

	// no validation rules for WorkId

	// no validation rules for Time

	// no validation rules for AutoId

	if len(errors) > 0 {
		return InfoDataMultiError(errors)
	}

	return nil
}

// InfoDataMultiError is an error wrapping multiple validation errors returned
// by InfoData.ValidateAll() if the designated constraints aren't met.
type InfoDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoDataMultiError) AllErrors() []error { return m }

// InfoDataValidationError is the validation error returned by
// InfoData.Validate if the designated constraints aren't met.
type InfoDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoDataValidationError) ErrorName() string { return "InfoDataValidationError" }

// Error satisfies the builtin error interface
func (e InfoDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoDataValidationError{}
