// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package error

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_REQUEST.String() && e.Code == 400
}

func ErrorInvalidRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_REQUEST.String(), fmt.Sprintf(format, args...))
}

// 重复请求
func IsDuplicateRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DUPLICATE_REQUEST.String() && e.Code == 400
}

// 重复请求
func ErrorDuplicateRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DUPLICATE_REQUEST.String(), fmt.Sprintf(format, args...))
}

// 系统错误以SYSTEM开头
func IsSystemClockRollbackError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_CLOCK_ROLLBACK_ERROR.String() && e.Code == 500
}

// 系统错误以SYSTEM开头
func ErrorSystemClockRollbackError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_CLOCK_ROLLBACK_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsSystemInvalidConfError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_INVALID_CONF_ERROR.String() && e.Code == 500
}

func ErrorSystemInvalidConfError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_INVALID_CONF_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsSystemUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorSystemUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}
